import { randomInt } from 'crypto';
import { Types } from 'mongoose';
import { Item } from '../../item/item';
import { ITEM_GROUP } from '../../item/item-group';
import itemService from '../../item/item-service';
import { ContentsDoc } from './contents';

type ContentsDocWithId = (ContentsDoc & {
    _id: Types.ObjectId;
});

const generate = async (): Promise<ContentsDoc[]> => {

    let groups = Object.values(ITEM_GROUP);

    const items: Item[] = [];
    const arr = new Array(5).fill(0);
    for (_ in arr) {
        const group = groups[randomInt(5)];
        const foundItems = await itemService.getRandomItems({grouping: group}, 1);
        items.push(foundItems[0]);
        if (items.filter(i => i.grouping === group).length > 1)
            delete groups[groups.indexOf(group)];
    }

    return new Promise((_, __) => []);
}

export default {
    generate,
};
